import pygame
from random import randint
import time
import copy

WIDTH = 1000
HIGHT = 1000
FPS = 30


pygame.init()
surface = pygame.display.set_mode((WIDTH, HIGHT), pygame.RESIZABLE)
clock = pygame.time.Clock()

SPEED = 5
MIN_SPEED = 0
MAX_SPEED = 30

GRID_SIDE = 101
AUTOPLAY = 0


step = 0
firststart = 0

grid = [[0 for i in range(GRID_SIDE)] for i in range(GRID_SIDE)]

#grid = [[randint(0, 1) for i in range(1, GRID_SIDE)] for i in range(1, GRID_SIDE)]


Xmove = 25
Ymove = 10


hardcoded =[
[0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1],
[1,0,0,0,0,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0],
[1,0,1,0,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,1,1,1],
[1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0],
[0,1,1,0,0,1,0,1,0,1,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,0,0,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0],
[1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
]

for hx in range(46):
    for hy in range(41):
        grid[hx + Xmove][hy + Ymove] = hardcoded[hy][hx]

tgrid = [[0 for i in range(GRID_SIDE)] for i in range(GRID_SIDE)]




def sum_cells(x=0, y=0):
    sums = 0 - grid[x][y]
    vy = -1
    while vy < 2:
        vx = -1
        while vx < 2:
            sums = sums + grid[x + vx][y + vy]
            vx = vx + 1
        vy = vy + 1
    return sums



def isalive(state, num):
    if state == 1:
        if num == 2 or num == 3:
            return 1
        else:
            return 0
    else:
        if num == 3:
            return 1
        else:
            return 0



def disp():
    for ypos in range(1, GRID_SIDE-1):
        for xpos in range(1, GRID_SIDE-1):
            if grid[xpos][ypos] == 1:
                pygame.draw.rect(surface, (255, 255, 255), ((xpos * 10)-10, (ypos * 10)-10, 10, 10))
            else:
                pygame.draw.rect(surface, (0, 0, 0), ((xpos * 10)-10, (ypos * 10)-10, 10, 10))
    pygame.display.update()



def fill_empty():
    for ry in range(1, GRID_SIDE-1):
        for rx in range(1, GRID_SIDE-1):
            grid[rx][ry] = 0



def fill_random():
    for ry in range(1, GRID_SIDE-1):
        for rx in range(1, GRID_SIDE-1):
            grid[rx][ry] = randint(0, 1)



def next_gen():
    for posy in range(1, GRID_SIDE-1):
        for posx in range(1, GRID_SIDE-1):
            tgrid[posx][posy] = isalive(grid[posx][posy], sum_cells(posx, posy))
    return copy.deepcopy(tgrid)








surface.fill((0, 0, 0))
disp()

while True:
    for e in pygame.event.get():
        if e.type == pygame.QUIT:
            exit()
        if e.type == pygame.KEYDOWN:
            if firststart <= 40:
                firststart = 41
            if e.key == pygame.K_c:
                fill_empty()
            if e.key == pygame.K_r:
                fill_random()
            if e.key == pygame.K_a:
                AUTOPLAY = not AUTOPLAY
            if e.key == pygame.K_SPACE:
                if AUTOPLAY == 1:
                    AUTOPLAY = 0
                else:
                    step = 1
            if (e.key == pygame.K_EQUALS or e.key == pygame.K_KP_PLUS) and SPEED > MIN_SPEED:
                SPEED -= 1
            if (e.key == pygame.K_MINUS or e.key == pygame.K_KP_MINUS) and SPEED <= MAX_SPEED:
                SPEED += 1
        if e.type == pygame.MOUSEBUTTONDOWN and e.button == 1:
            position = str(e.pos)
            separator = position.find(',')
            hpos = int(int(position[1:separator]) / 10)+1
            vpos = int(int(position[separator+2:-1]) / 10)+1
            if(hpos > 0 and hpos < GRID_SIDE and vpos > 0 and vpos < GRID_SIDE):
                grid[hpos][vpos] = not grid[hpos][vpos]

    if firststart <= 40:
        if firststart == 40:
            AUTOPLAY = 1
        else:
            time.sleep(0.05)
            firststart += 1


    if AUTOPLAY:
        grid = next_gen()
    elif step:
        grid = next_gen()
        step = 0

    disp()
    clock.tick(FPS)
    if AUTOPLAY == 1:
        time.sleep(SPEED/100)
